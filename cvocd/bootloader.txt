I make a bunch of electronic devices and kits which are mostly based around microcontrollers. I use both AVR (generally the Atmega328P) and PIC chips (usually PIC16F1825 and PIC12F1822) in these kits.

Both these chips their strengths:

The ATMega328P is great for open source stuff because code can be written using the Arduino IDE and libraries. While the Arduino toolchain might not be the slickest or best, it is perfectly adequate, it is free, it tends to be easy to set up, and above all there are no ends of examples online.

The PICs are smaller, cheaper, very hard to break unless you are really trying, they'll run at high clock speeds on their internal oscillators, so you don't need an internal crystal, and they tend come loaded with lots of nice on-chip peripherals, which often turn out to be useful in the most unexpected ways. 

I tend to go with the PIC for smaller projects where the microcontroller has an easier job needing less IO lines, and where it is probably less likely that users will want to write their own code. For example a mini games console might encourage user coding more than a MIDI to CV converter.

However, another area where the ATMega328P wins out is that it can easily be flashed with the Arduino bootloader. This then allows users to update firmware using free software (the Arduino toolchain) and a cheap USB-TLL programmer (just a few dollars). There is no similar "standard" bootloader for the PICs and a hardware programmer such as the PICKit2 costs $30 or more.

This really started to become an issue for my kits, since I always find new ways to add new functionality in firmware while using the same hardware. For through hole kits I can make programmed replacement chips available, but for surface mount stuff there is no easy upgrade path for a PIC based design except for a user to return it to me, or get hold of a PIC programmer. 

So, I decided to create my own bootloader... and rather than make it work with a USB-TTL programmer, I wanted it to accept new firmware code over MIDI. There is an established convention of using MIDI System Exclusive (sysex) files for firmware uploads to MIDI devices (and these are generally devices that already have MIDI inputs). I found that this was a bit more tricky that it may at first appear, so I am documenting my learning experience here so that you might benefit from it!

OK, firstly what do we mean by a bootloader? Well traditionally a bootloader is a small program which contains just enough functionality to load the application program or an operating system from external storage like a hard disk (in fact in some very early computers every startup needed the booloader machine instructions to be manually entered via paddle switches on the console!)
What I am specifically talking about is a small program which is used to receive new application firmware code (e.g. from a serial port), program it into the flash memory of a microcontroller, and execute it. Or if no new application code is available, the last programmed firmware application code is executed. Crucially the bootloader is always safe from being overwritten by application code (since it does the programming itself, it can protect itself). The Arduino bootloader can be described like this - in that case the bootloader waits for a couple of seconds at startup time to see if any new application code ("sketch") is forthcoming on the serial port, if not it just starts up the last sketch.

So for our PIC bootloader, we need to write some code which is small (so it is not taking up space we want to use with the firmware)



On the PIC16F1825 the flash memory is laid as follows
0000 application reset vector
0004 interrupt vector



This means that when the processor resets (e.g. power up) it starts executing code from address 0000. The code here is actual executable machine code, but since there are only four words available, it will be an unconditional jump into the "real" application start point somewhere in the application code space.

When the processor generates an interrupt, it starts to execute code at address 0004. The interrupt service routine can sit at this address, or maybe there can be an unconditional jump to a routine at a higher address (as the toolchain may decide)

So the first thing we need to note is that if we want to create a bootloader routine, we need to make sure that the code at 0000 will always be a jump to the start of the bootloader routine (otherwise we have lost control of the bootup sequence). However when the bootloader wants to execute the firmware application it needs to run the code that the firmware application *would have* placed at address 0000 (since that code will jump to the correct point in the application code), so the bootloader always needs to "remember" the 4-word application reset vector.

During my various internet searches I got the impression that bootloader code would usually be placed at the bottom of the memory, however placing the code at the very top of memory seemed to make more sense

- If our bootloader resides at the bottom of memory then every firmware applicaton needs to be linked to run at a memory address above the bootloader. This means we always have to take the bootloader size into account for every firmware application we build (it seems PIC machine code uses a lot of jumps to absolute addresses and is not easily relocatable). If we ever change the size of the bootloader we'd need to update all our firmware builds to change their base addresses. 

- However if we place the bootloader at the top of memory, then as long as the firmware code does not exceed the flash memory space available below the bootloader, we can use standard compliler and linker settings when we build the firmware (i.e. located from address 0000) but when we program new firmware we just need to preserve the bootloader's own reset vector at 0000 and somehow remember the firmware reset vector so we can execute it when we want to run the firmware application from the bootloader.


I went with the option to place the bootloader in high memory, I am also using a button press at power-on to specify bootloader mode, so the function basically becomes

flash memory var saved_reset_vector

if button pressed 
	goto program_mode:
else
	goto saved_reset_vector
endif

program_mode:
	loop forever
		receive block of application code
		if this block would overwrite address 0000-0003 
			save these 4 words of application code to saved_reset_vector
			replace those 4 words with bootloader's own reset vector
		write the block to flash memory
	end loop


Since the bootloader is actively initiated with a button, I thought it was acceptable that it never returns - i.e. user has to cycle the power of the device to run the application 








